
import logger from '@/utils/logger';

import { useCallback } from 'react';
import { useProductionCapture } from './useProductionCapture';
import { enrichCustomizationWithProductionFiles, validateUnifiedCustomization } from '@/services/unifiedCapture.service';

export const useHDCaptureOnAddToCart = () => {
  const { captureForProduction, isCapturing } = useProductionCapture();

  const captureForProductionCart = useCallback(async (customization: any): Promise<any> => {
    try {
      logger.log('üé¨ [HDCaptureOnAddToCart] D√©but capture optimis√©e pour production');
      logger.log('üìã [HDCaptureOnAddToCart] Donn√©es re√ßues:', customization);
      
      // Valider la personnalisation
      if (!validateUnifiedCustomization(customization)) {
        console.warn('‚ö†Ô∏è [HDCaptureOnAddToCart] Aucune personnalisation valide d√©tect√©e');
        return customization;
      }

      logger.log('‚úÖ [HDCaptureOnAddToCart] Personnalisation valide, lancement capture optimis√©e...');

      // Utiliser le service de capture optimis√©
      const productionFiles = await captureForProduction(customization);
      
      logger.log('üì§ [HDCaptureOnAddToCart] R√©sultat capture optimis√©e:', productionFiles);

      // V√©rifier si au moins un fichier a √©t√© g√©n√©r√©
      const hasAnyFile = productionFiles.frontUrl || productionFiles.backUrl;
      
      if (hasAnyFile) {
        logger.log('üéâ [HDCaptureOnAddToCart] Au moins un fichier HD g√©n√©r√©');
        
        // Enrichir la customization avec les nouvelles URLs
        const enrichedCustomization = {
          ...customization,
          visual_front_url: productionFiles.frontUrl || customization.visual_front_url,
          visual_back_url: productionFiles.backUrl || customization.visual_back_url,
          // Garder les URLs existantes pour compatibilit√©
          hdRectoUrl: productionFiles.frontUrl || customization.hdRectoUrl,
          hdVersoUrl: productionFiles.backUrl || customization.hdVersoUrl
        };
        
        logger.log('üì¶ [HDCaptureOnAddToCart] Customization enrichie:', enrichedCustomization);
        
        return enrichedCustomization;
      } else {
        console.warn('‚ö†Ô∏è [HDCaptureOnAddToCart] Aucun fichier g√©n√©r√©');
        return customization;
      }
    } catch (error) {
      console.error('‚ùå [HDCaptureOnAddToCart] Erreur durant la capture optimis√©e:', error);
      // En cas d'erreur, retourner la customization originale sans bloquer l'ajout au panier
      return customization;
    }
  }, [captureForProduction]);

  return {
    captureForProduction: captureForProductionCart,
    isCapturing
  };
};
