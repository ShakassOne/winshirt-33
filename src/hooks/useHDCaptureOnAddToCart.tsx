
import logger from '@/utils/logger';

import { useCallback } from 'react';
import { useProductionGeneration } from './useProductionGeneration';
import { enrichCustomizationWithProductionFiles, validateUnifiedCustomization } from '@/services/unifiedCapture.service';

export const useHDCaptureOnAddToCart = () => {
  const { generateProductionFiles, isGenerating } = useProductionGeneration();

  const captureForProduction = useCallback(async (customization: any): Promise<any> => {
    try {
      logger.log('üé¨ [HDCaptureOnAddToCart] D√©but capture pour production');
      logger.log('üìã [HDCaptureOnAddToCart] Donn√©es re√ßues:', customization);
      
      // Valider la personnalisation
      if (!validateUnifiedCustomization(customization)) {
        console.warn('‚ö†Ô∏è [HDCaptureOnAddToCart] Aucune personnalisation valide d√©tect√©e');
        return customization;
      }

      logger.log('‚úÖ [HDCaptureOnAddToCart] Personnalisation valide, lancement g√©n√©ration...');

      // Pr√©parer les URLs de mockup
      const mockupUrls = {
        front: undefined, // √Ä adapter selon vos besoins
        back: undefined   // √Ä adapter selon vos besoins
      };
      
      const productInfo = {
        name: 'Produit personnalis√©',
        id: 'temp-id'
      };

      logger.log('üöÄ [HDCaptureOnAddToCart] D√©marrage de la g√©n√©ration de production...');
      const productionFiles = await generateProductionFiles(customization, mockupUrls, productInfo);
      
      logger.log('üì§ [HDCaptureOnAddToCart] R√©sultat g√©n√©ration:', productionFiles);

      // V√©rifier si au moins un fichier a √©t√© g√©n√©r√©
      const hasAnyFile = 
        productionFiles.front.mockupUrl || productionFiles.back.mockupUrl || 
        productionFiles.front.hdUrl || productionFiles.back.hdUrl;
      
      if (hasAnyFile) {
        logger.log('üéâ [HDCaptureOnAddToCart] Au moins un fichier g√©n√©r√©');
        
        const enrichedCustomization = enrichCustomizationWithProductionFiles(customization, productionFiles);
        logger.log('üì¶ [HDCaptureOnAddToCart] Customization enrichie:', enrichedCustomization);
        
        return enrichedCustomization;
      } else {
        console.warn('‚ö†Ô∏è [HDCaptureOnAddToCart] Aucun fichier g√©n√©r√©');
        return customization;
      }
    } catch (error) {
      console.error('‚ùå [HDCaptureOnAddToCart] Erreur durant la g√©n√©ration:', error);
      // En cas d'erreur, retourner la customization originale sans bloquer l'ajout au panier
      return customization;
    }
  }, [generateProductionFiles]);

  return {
    captureForProduction,
    isCapturing: isGenerating
  };
};
